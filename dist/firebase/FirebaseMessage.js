"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./../types");
const base_1 = require("../base");
/**
 * Reference: https://firebase.google.com/docs/reference/admin/node/admin.messaging.NotificationMessagePayload
 */
class FirebaseMessage extends base_1.BaseMessage {
    constructor(data) {
        super(Object.assign({}, data, { type: types_1.TransportTypes.FIREBASE }));
        this.registrationToken = data.registrationToken;
        // Multi-platform attributes
        this.sound = data.sound;
        this.title = data.title;
        this.titleLocArgs = data.titleLocArgs;
        this.titleLocKey = data.titleLocKey;
        this.body = data.body;
        this.bodyLocArgs = data.bodyLocArgs;
        this.bodyLocKey = data.bodyLocKey;
        this.clickAction = data.clickAction;
        // Android specific attributes
        this.tag = data.tag;
        this.color = data.color;
        this.icon = data.icon;
        // iOS specific attributes
        this.badge = data.badge;
        // Put additional values in payload
        for (let k in data) {
            if (data.hasOwnProperty(k) && this[k] === undefined) {
                this[k] = data[k];
            }
        }
    }
}
exports.default = FirebaseMessage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlyZWJhc2VNZXNzYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2ZpcmViYXNlL0ZpcmViYXNlTWVzc2FnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUE0QztBQUM1QyxrQ0FBeUQ7QUE0QnpEOztHQUVHO0FBQ0gscUJBQXFDLFNBQVEsa0JBQVc7SUEwQnRELFlBQVksSUFBMkI7UUFDckMsS0FBSyxtQkFBTSxJQUFJLElBQUUsSUFBSSxFQUFFLHNCQUFjLENBQUMsUUFBUSxJQUFHLENBQUM7UUFDbEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUVoRCw0QkFBNEI7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDcEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUVwQyw4QkFBOEI7UUFDOUIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFdEIsMEJBQTBCO1FBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUV4QixtQ0FBbUM7UUFDbkMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNuQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBdkRELGtDQXVEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYW5zcG9ydFR5cGVzIH0gZnJvbSAnLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBCYXNlTWVzc2FnZSwgQmFzZU1lc3NhZ2VTY2hlbWEgfSBmcm9tIFwiLi4vYmFzZVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZpcmViYXNlTWVzc2FnZVNjaGVtYSBleHRlbmRzIEJhc2VNZXNzYWdlU2NoZW1hIHtcbiAgLy8gRmlyZWJhc2UgRGV2aWNlIFRva2VuXG4gIHJlZ2lzdHJhdGlvblRva2VuOiBzdHJpbmc7XG5cbiAgLy8gTXVsdGktcGxhdGZvcm0gYXR0cmlidXRlc1xuICBib2R5Pzogc3RyaW5nO1xuICBzb3VuZD86IHN0cmluZztcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGJvZHlMb2NLZXk/OiBzdHJpbmc7XG4gIGJvZHlMb2NBcmdzPzogc3RyaW5nO1xuICBjbGlja0FjdGlvbj86IHN0cmluZztcbiAgdGl0bGVMb2NLZXk/OiBzdHJpbmc7XG4gIHRpdGxlTG9jQXJncz86IHN0cmluZztcblxuICAvLyBBbmRyb2lkIHNwZWNpZmljIGF0dHJpYnV0ZXNcbiAgdGFnPzogc3RyaW5nXG4gIGNvbG9yPzogc3RyaW5nXG4gIGljb24/OiBzdHJpbmdcblxuICAvLyBpT1Mgc3BlY2lmaWMgYXR0cmlidXRlc1xuICBiYWRnZT86IHN0cmluZ1xuXG4gIC8vIE90aGVyIGF0dHJpYnV0ZXNcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvcmVmZXJlbmNlL2FkbWluL25vZGUvYWRtaW4ubWVzc2FnaW5nLk5vdGlmaWNhdGlvbk1lc3NhZ2VQYXlsb2FkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZpcmViYXNlTWVzc2FnZSBleHRlbmRzIEJhc2VNZXNzYWdlIGltcGxlbWVudHMgRmlyZWJhc2VNZXNzYWdlU2NoZW1hIHtcbiAgX2lkOiBzdHJpbmc7XG4gIF90eXBlOiBzdHJpbmc7XG4gIHJlZ2lzdHJhdGlvblRva2VuOiBzdHJpbmc7XG5cbiAgLy8gTXVsdGktcGxhdGZvcm0gYXR0cmlidXRlc1xuICBib2R5Pzogc3RyaW5nO1xuICBzb3VuZD86IHN0cmluZztcbiAgdGl0bGU/OiBzdHJpbmc7XG4gIGJvZHlMb2NLZXk/OiBzdHJpbmc7XG4gIGJvZHlMb2NBcmdzPzogc3RyaW5nO1xuICBjbGlja0FjdGlvbj86IHN0cmluZztcbiAgdGl0bGVMb2NLZXk/OiBzdHJpbmc7XG4gIHRpdGxlTG9jQXJncz86IHN0cmluZztcblxuICAvLyBBbmRyb2lkIHNwZWNpZmljIGF0dHJpYnV0ZXNcbiAgdGFnPzogc3RyaW5nXG4gIGNvbG9yPzogc3RyaW5nXG4gIGljb24/OiBzdHJpbmdcblxuICAvLyBpT1Mgc3BlY2lmaWMgYXR0cmlidXRlc1xuICBiYWRnZT86IHN0cmluZ1xuXG4gIC8vIE90aGVyIGF0dHJpYnV0ZXNcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IEZpcmViYXNlTWVzc2FnZVNjaGVtYSkge1xuICAgIHN1cGVyKHsgLi4uZGF0YSwgdHlwZTogVHJhbnNwb3J0VHlwZXMuRklSRUJBU0UgfSk7XG4gICAgdGhpcy5yZWdpc3RyYXRpb25Ub2tlbiA9IGRhdGEucmVnaXN0cmF0aW9uVG9rZW47XG5cbiAgICAvLyBNdWx0aS1wbGF0Zm9ybSBhdHRyaWJ1dGVzXG4gICAgdGhpcy5zb3VuZCA9IGRhdGEuc291bmQ7XG4gICAgdGhpcy50aXRsZSA9IGRhdGEudGl0bGU7XG4gICAgdGhpcy50aXRsZUxvY0FyZ3MgPSBkYXRhLnRpdGxlTG9jQXJncztcbiAgICB0aGlzLnRpdGxlTG9jS2V5ID0gZGF0YS50aXRsZUxvY0tleTtcbiAgICB0aGlzLmJvZHkgPSBkYXRhLmJvZHk7XG4gICAgdGhpcy5ib2R5TG9jQXJncyA9IGRhdGEuYm9keUxvY0FyZ3M7XG4gICAgdGhpcy5ib2R5TG9jS2V5ID0gZGF0YS5ib2R5TG9jS2V5O1xuICAgIHRoaXMuY2xpY2tBY3Rpb24gPSBkYXRhLmNsaWNrQWN0aW9uO1xuXG4gICAgLy8gQW5kcm9pZCBzcGVjaWZpYyBhdHRyaWJ1dGVzXG4gICAgdGhpcy50YWcgPSBkYXRhLnRhZztcbiAgICB0aGlzLmNvbG9yID0gZGF0YS5jb2xvcjtcbiAgICB0aGlzLmljb24gPSBkYXRhLmljb247XG5cbiAgICAvLyBpT1Mgc3BlY2lmaWMgYXR0cmlidXRlc1xuICAgIHRoaXMuYmFkZ2UgPSBkYXRhLmJhZGdlO1xuXG4gICAgLy8gUHV0IGFkZGl0aW9uYWwgdmFsdWVzIGluIHBheWxvYWRcbiAgICBmb3IgKGxldCBrIGluIGRhdGEpIHtcbiAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGspICYmIHRoaXNba10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzW2tdID0gZGF0YVtrXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0iXX0=