"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./../types");
const base_1 = require("../base");
/**
 * Reference: https://firebase.google.com/docs/reference/admin/node/admin.messaging.NotificationMessagePayload
 */
class FirebaseMessage extends base_1.BaseMessage {
    constructor(data) {
        super(Object.assign({}, data, { type: types_1.TransportTypes.FIREBASE }));
        this.registrationToken = data.registrationToken;
        // Multi-platform attributes
        if (data.sound) {
            this.sound = data.sound;
        }
        if (data.title) {
            this.title = data.title;
        }
        if (data.titleLocArgs) {
            this.titleLocArgs = data.titleLocArgs;
        }
        if (data.titleLocKey) {
            this.titleLocKey = data.titleLocKey;
        }
        if (data.body) {
            this.body = data.body;
        }
        if (data.bodyLocArgs) {
            this.bodyLocArgs = data.bodyLocArgs;
        }
        if (data.bodyLocKey) {
            this.bodyLocKey = data.bodyLocKey;
        }
        if (data.clickAction) {
            this.clickAction = data.clickAction;
        }
        // Android specific attributes
        if (data.tag) {
            this.tag = data.tag;
        }
        if (data.color) {
            this.color = data.color;
        }
        if (data.icon) {
            this.icon = data.icon;
        }
        // iOS specific attributes
        if (data.badge) {
            this.badge = data.badge;
        }
        // Put additional values in payload
        for (let k in data) {
            if (data.hasOwnProperty(k) && this[k] === undefined) {
                this[k] = data[k];
            }
        }
    }
}
exports.FirebaseMessage = FirebaseMessage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlyZWJhc2VNZXNzYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2ZpcmViYXNlL0ZpcmViYXNlTWVzc2FnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUE0QztBQUM1QyxrQ0FBeUQ7QUE0QnpEOztHQUVHO0FBQ0gsTUFBYSxlQUFnQixTQUFRLGtCQUFXO0lBMEI5QyxZQUFZLElBQTJCO1FBQ3JDLEtBQUssbUJBQU0sSUFBSSxJQUFFLElBQUksRUFBRSxzQkFBYyxDQUFDLFFBQVEsSUFBRyxDQUFDO1FBQ2xELElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFFaEQsNEJBQTRCO1FBQzVCLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUN6QjtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUN6QjtRQUNELElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7U0FDdkM7UUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ3JDO1FBQ0QsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ3ZCO1FBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUNyQztRQUNELElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7U0FDbkM7UUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ3JDO1FBRUQsOEJBQThCO1FBQzlCLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUNyQjtRQUNELElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUN6QjtRQUNELElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtZQUNiLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztTQUN2QjtRQUVELDBCQUEwQjtRQUMxQixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7U0FDekI7UUFFRCxtQ0FBbUM7UUFDbkMsS0FBSyxJQUFJLENBQUMsSUFBSSxJQUFJLEVBQUU7WUFDbEIsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxTQUFTLEVBQUU7Z0JBQ25ELElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbkI7U0FDRjtJQUNILENBQUM7Q0FDRjtBQS9FRCwwQ0ErRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFuc3BvcnRUeXBlcyB9IGZyb20gJy4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgQmFzZU1lc3NhZ2UsIEJhc2VNZXNzYWdlU2NoZW1hIH0gZnJvbSBcIi4uL2Jhc2VcIjtcblxuZXhwb3J0IGludGVyZmFjZSBGaXJlYmFzZU1lc3NhZ2VTY2hlbWEgZXh0ZW5kcyBCYXNlTWVzc2FnZVNjaGVtYSB7XG4gIC8vIEZpcmViYXNlIERldmljZSBUb2tlblxuICByZWdpc3RyYXRpb25Ub2tlbjogc3RyaW5nO1xuXG4gIC8vIE11bHRpLXBsYXRmb3JtIGF0dHJpYnV0ZXNcbiAgYm9keT86IHN0cmluZztcbiAgc291bmQ/OiBzdHJpbmc7XG4gIHRpdGxlPzogc3RyaW5nO1xuICBib2R5TG9jS2V5Pzogc3RyaW5nO1xuICBib2R5TG9jQXJncz86IHN0cmluZztcbiAgY2xpY2tBY3Rpb24/OiBzdHJpbmc7XG4gIHRpdGxlTG9jS2V5Pzogc3RyaW5nO1xuICB0aXRsZUxvY0FyZ3M/OiBzdHJpbmc7XG5cbiAgLy8gQW5kcm9pZCBzcGVjaWZpYyBhdHRyaWJ1dGVzXG4gIHRhZz86IHN0cmluZ1xuICBjb2xvcj86IHN0cmluZ1xuICBpY29uPzogc3RyaW5nXG5cbiAgLy8gaU9TIHNwZWNpZmljIGF0dHJpYnV0ZXNcbiAgYmFkZ2U/OiBzdHJpbmdcblxuICAvLyBPdGhlciBhdHRyaWJ1dGVzXG4gIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL3JlZmVyZW5jZS9hZG1pbi9ub2RlL2FkbWluLm1lc3NhZ2luZy5Ob3RpZmljYXRpb25NZXNzYWdlUGF5bG9hZFxuICovXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VNZXNzYWdlIGV4dGVuZHMgQmFzZU1lc3NhZ2UgaW1wbGVtZW50cyBGaXJlYmFzZU1lc3NhZ2VTY2hlbWEge1xuICBfaWQ6IHN0cmluZztcbiAgX3R5cGU6IHN0cmluZztcbiAgcmVnaXN0cmF0aW9uVG9rZW46IHN0cmluZztcblxuICAvLyBNdWx0aS1wbGF0Zm9ybSBhdHRyaWJ1dGVzXG4gIGJvZHk/OiBzdHJpbmc7XG4gIHNvdW5kPzogc3RyaW5nO1xuICB0aXRsZT86IHN0cmluZztcbiAgYm9keUxvY0tleT86IHN0cmluZztcbiAgYm9keUxvY0FyZ3M/OiBzdHJpbmc7XG4gIGNsaWNrQWN0aW9uPzogc3RyaW5nO1xuICB0aXRsZUxvY0tleT86IHN0cmluZztcbiAgdGl0bGVMb2NBcmdzPzogc3RyaW5nO1xuXG4gIC8vIEFuZHJvaWQgc3BlY2lmaWMgYXR0cmlidXRlc1xuICB0YWc/OiBzdHJpbmdcbiAgY29sb3I/OiBzdHJpbmdcbiAgaWNvbj86IHN0cmluZ1xuXG4gIC8vIGlPUyBzcGVjaWZpYyBhdHRyaWJ1dGVzXG4gIGJhZGdlPzogc3RyaW5nXG5cbiAgLy8gT3RoZXIgYXR0cmlidXRlc1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoZGF0YTogRmlyZWJhc2VNZXNzYWdlU2NoZW1hKSB7XG4gICAgc3VwZXIoeyAuLi5kYXRhLCB0eXBlOiBUcmFuc3BvcnRUeXBlcy5GSVJFQkFTRSB9KTtcbiAgICB0aGlzLnJlZ2lzdHJhdGlvblRva2VuID0gZGF0YS5yZWdpc3RyYXRpb25Ub2tlbjtcblxuICAgIC8vIE11bHRpLXBsYXRmb3JtIGF0dHJpYnV0ZXNcbiAgICBpZiAoZGF0YS5zb3VuZCkge1xuICAgICAgdGhpcy5zb3VuZCA9IGRhdGEuc291bmQ7XG4gICAgfVxuICAgIGlmIChkYXRhLnRpdGxlKSB7XG4gICAgICB0aGlzLnRpdGxlID0gZGF0YS50aXRsZTtcbiAgICB9XG4gICAgaWYgKGRhdGEudGl0bGVMb2NBcmdzKSB7XG4gICAgICB0aGlzLnRpdGxlTG9jQXJncyA9IGRhdGEudGl0bGVMb2NBcmdzO1xuICAgIH1cbiAgICBpZiAoZGF0YS50aXRsZUxvY0tleSkge1xuICAgICAgdGhpcy50aXRsZUxvY0tleSA9IGRhdGEudGl0bGVMb2NLZXk7XG4gICAgfVxuICAgIGlmIChkYXRhLmJvZHkpIHtcbiAgICAgIHRoaXMuYm9keSA9IGRhdGEuYm9keTtcbiAgICB9XG4gICAgaWYgKGRhdGEuYm9keUxvY0FyZ3MpIHtcbiAgICAgIHRoaXMuYm9keUxvY0FyZ3MgPSBkYXRhLmJvZHlMb2NBcmdzO1xuICAgIH1cbiAgICBpZiAoZGF0YS5ib2R5TG9jS2V5KSB7XG4gICAgICB0aGlzLmJvZHlMb2NLZXkgPSBkYXRhLmJvZHlMb2NLZXk7XG4gICAgfVxuICAgIGlmIChkYXRhLmNsaWNrQWN0aW9uKSB7XG4gICAgICB0aGlzLmNsaWNrQWN0aW9uID0gZGF0YS5jbGlja0FjdGlvbjtcbiAgICB9XG5cbiAgICAvLyBBbmRyb2lkIHNwZWNpZmljIGF0dHJpYnV0ZXNcbiAgICBpZiAoZGF0YS50YWcpIHtcbiAgICAgIHRoaXMudGFnID0gZGF0YS50YWc7XG4gICAgfVxuICAgIGlmIChkYXRhLmNvbG9yKSB7XG4gICAgICB0aGlzLmNvbG9yID0gZGF0YS5jb2xvcjtcbiAgICB9XG4gICAgaWYgKGRhdGEuaWNvbikge1xuICAgICAgdGhpcy5pY29uID0gZGF0YS5pY29uO1xuICAgIH1cblxuICAgIC8vIGlPUyBzcGVjaWZpYyBhdHRyaWJ1dGVzXG4gICAgaWYgKGRhdGEuYmFkZ2UpIHtcbiAgICAgIHRoaXMuYmFkZ2UgPSBkYXRhLmJhZGdlO1xuICAgIH1cblxuICAgIC8vIFB1dCBhZGRpdGlvbmFsIHZhbHVlcyBpbiBwYXlsb2FkXG4gICAgZm9yIChsZXQgayBpbiBkYXRhKSB7XG4gICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrKSAmJiB0aGlzW2tdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpc1trXSA9IGRhdGFba107XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=